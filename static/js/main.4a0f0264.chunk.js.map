{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/addTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","texxtDecoration","Header","to","addTodo","state","e","setState","target","name","value","onSubmit","preventDefault","display","placeholder","flex","className","About","Fragment","App","console","log","axios","post","then","res","data","delete","filter","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a0f0264.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4', \r\n            padding: '8px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '} \r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}> x </button>\r\n                </p>\r\n             </div>\r\n                );\r\n                 \r\n                }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n        markComplete: PropTypes.func.isRequired,\r\n        delTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 10px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n\r\n\r\n\r\nconst itemStyle = {\r\n        backgroundColor: '#f4f4f4'\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\r\n    render() {\r\n        return this.props.todos.map((todo) => (\r\n            <div>\r\n                <TodoItem key={todo.id} todo={todo} delTodo={this.props.delTodo} markComplete={this.props.markComplete} />  \r\n            </div>\r\n        ));\r\n    }\r\n}\r\n    Todos.propTypes = {\r\n        todos: PropTypes.array.isRequired,\r\n        markComplete: PropTypes.func.isRequired,\r\n        delTodo: PropTypes.func.isRequired\r\n    }\r\n\r\nexport default Todos;  ","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1> TodoList </h1>\r\n            <Link style={linkStyle} to=\"/\"> Home </Link> | <Link style={linkStyle} to=\"/about\"> About </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',  \r\n    texxtDecoration: 'none'\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport class addTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name] : e.target.value});\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo ... \" value={this.state.title} onChange={this.onChange} style={{ flex: '10', padding: '5px' }} />\r\n        <input type=\"submit\" value=\"Submit\" className=\"btn\" style= {{flex: '1'}} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\naddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\nexport default addTodo ","import React, { Component } from 'react';\n\nfunction About() {\n    return (\r\n        <React.Fragment>\r\n            <h1> About </h1>\r\n            <p> This is the TodoList app v1.0.0. It is part of a React crash course </p>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import { BrowserRouter as Router, Route } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/addTodo';\nimport About from './components/pages/About';\nimport axios from 'axios';\n\nclass App extends Component {\n\n    state = {\n        todos: [\n           \n        ]\n    }\n\n    componentDidMount() {\n        axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({ todos: res.data }))\r\n    }\n\n    markComplete = (id) => {\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    console.log(id)\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo;\r\n            })\r\n        });\r\n    }\n\n    //add Todo\n\n    addTodo = (title) => {\n        axios.post('https://jsonplaceholder.typicode.com/todos', { title, completed: false }).then(res => this.setState({\r\n            todos: [...this.state.todos, res.data]\r\n        }));\n       \r\n        }\n\n\n    //Delete Todo\n\n    delTodo = (id) => {\n        axios.delete('https://jsonplaceholder.typicode.com/todos/${id}').then(res =>\n            this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }));\n      }\n\n\n    render() {\n\n        return (\n            <Router>\n            <div className=\"App\">\n                <div className=\"container\">\n                        <Header />\n                        <Route exact path=\"/\" render={props => (<React.Fragment>\n                            <AddTodo addTodo={this.addTodo} />\n                            <h1> App </h1>\n                            <Todos todos={this.state.todos} delTodo={this.delTodo} markComplete={this.markComplete} />\n\n\n                        </React.Fragment>)} />\n\n                        <Route path=\"/about\" component={About} />\n                   \n                </div>\n                </div>\n                </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Todos from './components/Todos';\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}